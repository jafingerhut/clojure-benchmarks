#! /usr/bin/env clj
;; -*- mode: Clojure -*-

(ns results2graphs.core
  (:require [clojure.xml :as xml]
            [clojure.repl :as repl]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [clojure.java.shell :as sh]
            [clojure.edn :as edn]
            ;;[clojure.tools.cli :as cli]
            [clojure.pprint :as p]))


(defn- temporary-file-name []
  (let [temp (java.io.File/createTempFile "clojure-benchmarks"
                                          (str (System/nanoTime)))]
    (assert (.delete temp))
    temp))


(def ^:dynamic *auto-flush* true)

(defn printf-to-writer [w fmt-str & args]
  (binding [*out* w]
    (apply clojure.core/printf fmt-str args)
    (when *auto-flush* (flush))))

(defn iprintf [fmt-str-or-writer & args]
  (if (instance? CharSequence fmt-str-or-writer)
    (apply printf-to-writer *out* fmt-str-or-writer args)
    (apply printf-to-writer fmt-str-or-writer args)))

(defn die [fmt-str & args]
  (apply iprintf *err* fmt-str args)
  (System/exit 1))

(defn basename
  "If the string contains one or more / characters, return the part of
  the string after the last /.  If it contains no / characters, return
  the entire string."
  [s]
  (if-let [[_ base] (re-matches #".*/([^/]+)" s)]
    base
    s))


(defn validate-parsed-xml
  "Verify that the XML file has the basic structure of a
  MeasurementList tag, with a content that is a sequence of
  Measurement tags."
  [parsed-xml]
  (and (= (:tag parsed-xml) :MeasurementList)
       (every? (fn [x] (= (:tag x) :Measurement))
               (:content parsed-xml))))


(defn validated-xml-to-xrel
  "For a parsed XML file that has the basic structure validated by
  validate-parsed-xml, create a sequence of maps with one map per
  measurement.  Each map has keys equal to the keywords of the tags in
  the measurement, and values equal to the contents of each tag in the
  measurement.  Some tags have their contents converted to bigints or
  doubles."
  [validated-xml]
  (for [measurement (:content validated-xml)]
    (into {}
          (for [measurement-detail (:content measurement)]
            (let [tag (:tag measurement-detail)
                  str-val (or (first (:content measurement-detail)) "")
                  exp-format (case tag
                               (:number_of_cpu_cores
                                :exit_status
                                :maximum_resident_set_size_kibibytes)
                               :int
                               
                               (:elapsed_time_sec
                                :user_cpu_time_sec
                                :system_cpu_time_sec)
                               :double
                               
                               :string)
                  val (case exp-format
                        :int (bigint str-val)
                        :double (Double/parseDouble str-val)
                        :string str-val)]
              [tag val])))))


(def ^:const temp-hack-jvm_java_vm_vendor-map
  {
   ["Java HotSpot(TM) Server VM"
    "Linux" "3.2.0-29-generic" "1.6.0_37" "32"] "Sun Microsystems Inc."
   ["Java HotSpot(TM) 64-Bit Server VM"
    "Linux" "3.2.0-29-generic" "1.6.0_37" "64"] "Sun Microsystems Inc."

   ["Java HotSpot(TM) Server VM"
    "Linux" "3.2.0-32-generic" "1.6.0_37" "32"] "Sun Microsystems Inc."
   ["Java HotSpot(TM) 64-Bit Server VM"
    "Linux" "3.2.0-32-generic" "1.6.0_37" "64"] "Sun Microsystems Inc."
   ["Java HotSpot(TM) Server VM"
    "Linux" "3.2.0-32-generic" "1.7.0_09" "32"] "Oracle Corporation"
   ["Java HotSpot(TM) 64-Bit Server VM"
    "Linux" "3.2.0-32-generic" "1.7.0_09" "64"] "Oracle Corporation"
   ["IBM J9 VM"
    "Linux" "3.2.0-32-generic" "1.6.0" "64"] "IBM Corporation"
   ["Java HotSpot(TM) 64-Bit Server VM"
    "Mac OS X" "10.6.8" "1.6.0_37" "64"] "Apple Inc."
   ["Java HotSpot(TM) Server VM"
    "Windows 7" "6.1" "1.7.0_09" "32"] "tbd"
   })


(defn first-word [s]
  (first (str/split s #"\s+")))


(defn lang-for-sorting [lang]
;;  (printf "andy-debug: lang='%s' re-find=%s\n"
;;          lang
;;          (re-find #"-RC\d+" lang))
  (cond
   (re-find #"-RC\d+" lang) (str/lower-case lang)
   (or (= lang "java")
       (re-find #"(alpha|beta)" lang))
   lang
   ;; Append "-zfinal" to the Clojure version number so that it sorts
   ;; alphabetically after the alpha, beta, and rc versions.
   :else (str lang "-zfinal")))


(defn lang-for-display [lang]
  ;; Remove any "-zfinal" at the end before showing in the graph
  (str/replace-first lang #"-zfinal$" ""))


(defn platform-str [java_vm_vendor java_vm_name os_name os_version
                    java_version sun_arch_data_model]
  (let [java_vm_vendor (if (nil? java_vm_vendor)
                             ;; Temporary hack to fill in this
                             ;; missing data for some existing XML
                             ;; benchmark result files I still have,
                             ;; without modifying those files.
                             (if-let [vendor (temp-hack-jvm_java_vm_vendor-map
                                              [java_vm_name
                                               os_name os_version
                                               java_version
                                               sun_arch_data_model])]
                               vendor
                               (do
                                 (iprintf *err* "No vendor known for java_vm_name='%s' os_name='%s' os_version='%s' java_version='%s' sun_arch_data_model='%s'.  Consider finding out and adding it to temp-hack-jvm_java_vm_vendor-map.\n"
                                          java_vm_name os_name os_version
                                          java_version sun_arch_data_model)
                                 "unknown_vendor"))
                             java_vm_vendor)
        java_vm_vendor (first-word java_vm_vendor)]
    (format "%s-bit %s JDK %s on %s %s"
            sun_arch_data_model
            java_vm_vendor java_version
            os_name os_version)))


(defn add-keys-to-xml-result-map [measurement-map]
  (let [{:keys [current_working_directory output_file
                jvm_os_name jvm_os_version jvm_java_vm_name jvm_java_vm_vendor
                jvm_java_version jvm_sun_arch_data_model
                user_cpu_time_sec system_cpu_time_sec elapsed_time_sec]}
        measurement-map

        benchmark (basename current_working_directory)
        lang (if-let [[_ size lang]
                      (re-matches #".*output/([^-]+)-(\S+)-output.txt"
                                  output_file)]
               lang
               nil)
        lang (lang-for-sorting lang)
        platform (platform-str jvm_java_vm_vendor jvm_java_vm_name
                               jvm_os_name jvm_os_version
                               jvm_java_version jvm_sun_arch_data_model)
        total_cpu_time_sec (+ user_cpu_time_sec system_cpu_time_sec)
        parallelism (/ total_cpu_time_sec elapsed_time_sec)
        ;; Round parallelism to fewer digits
        parallelism (format "%.2f" parallelism)]
    (assoc measurement-map :benchmark benchmark
           :language lang
           :platform platform
           :total_cpu_time_sec total_cpu_time_sec
           :parallelism parallelism)))


(defn replace-keys-of-cljexprs-result-map
  "Returns a new smaller map with only the keys needed later, because
otherwise the memory requirements can grow inconveniently large."
  [measurement-map]
  (let [{:keys [bindings expr]} measurement-map
        runtime-details (get-in measurement-map [:results :runtime-details])
        os-details (get-in measurement-map [:results :os-details])

        benchmark (str bindings " " expr)
        vers (get-in measurement-map [:results :runtime-details
                                      :clojure-version])
        lang (str "clj-" (:major vers) "." (:minor vers)
                  (if (zero? (:incremental vers))
                    ""
                    (str "." (:incremental vers)))
                  (if (nil? (:qualifier vers))
                    ""
                    (str "-" (:qualifier vers))))
        lang (lang-for-sorting lang)

        platform (platform-str (:vm-vendor runtime-details)
                               (:vm-name runtime-details)
                               (:name os-details)
                               (:version os-details)
                               (:java-version runtime-details)
                               (:sun-arch-data-model runtime-details))
        mean-run-time-sec (first (get-in measurement-map [:results :mean]))
        parallelism "1.00"]
    {:benchmark benchmark
     :language lang
     :platform platform
     :total_cpu_time_sec mean-run-time-sec
     :parallelism parallelism
     :exit_status 0
     :elapsed_time_sec mean-run-time-sec}))


(defn fastest-good-run [[benchmark-platform-lang measurements]]
  (let [num-runs (count measurements)
        good-runs (filter #(zero? (:exit_status %)) measurements)
        num-good-runs (count good-runs)]
    (if (zero? num-good-runs)
      (assoc benchmark-platform-lang :num_runs num-runs
             :good_runs 0 :elapsed_time_sec -1)
      (let [fastest-run (apply min-key :elapsed_time_sec good-runs)
            elapsed-times (sort (map :elapsed_time_sec good-runs))
            max-over-min (/ (apply max elapsed-times)
                            (apply min elapsed-times))
            ;; Round max-over-min to fewer digits
            max-over-min (format "%.2f" max-over-min)]
        (assoc fastest-run :num_runs num-runs
               :good_runs num-good-runs
               :other_elapsed_time_sec elapsed-times
               :time_var max-over-min)))))


(defn compare-by-benchmark-platform-language-time [meas1 meas2]
  (let [x (compare (:benchmark meas1) (:benchmark meas2))]
    (if (not= x 0)
      x
      (let [x (compare (:platform meas1) (:platform meas2))]
        (if (not= x 0)
          x
          (let [x (compare (:language meas1) (:language meas2))]
            (if (not= x 0)
              x
              (compare (:elapsed_time_sec meas1) (:elapsed_time_sec meas2)))))))))


(defn validated-xrel-from-xml-file [xml-filename prog-name]
  (let [p (try
            (xml/parse xml-filename)
            (catch Exception e
              (iprintf *err* "%s: clojure.xml/parse got exception while attempting
to read file '%s'\n"
                       prog-name xml-filename)
              (repl/pst e)
              (die "Aborting.\n")))]
    (when-not (validate-parsed-xml p)
      (die "%s: XML file %s must be a MeasurementList
consisting of one or more Measurement elements\n"
           prog-name xml-filename))
    ;; p is output of xml/parse.
    ;; validated-xml-to-xrel produces a sequence of maps, each map
    ;; containing details of one measurement.
    (validated-xml-to-xrel p)))


(defn do-read [rdr eof-sentinel]
  ;; Some forms in :results key for cljexprs benchmarks look like
  ;; this, and are not readable via edn reader or even the regular
  ;; Clojure reader:
  ;; #<TransientVector clojure.lang.PersistentVector$TransientVector@191f1340>
  ;; For now I am removing these using a Perl program on the output
  ;; file before processing with results2graphs.
  ;;(read rdr false eof-sentinel)
  (edn/read {:eof eof-sentinel} rdr))


(defn xrel-from-cljexprs-results-file [cljexprs-results-filename prog-name]
  (with-open [r (java.io.PushbackReader. (io/reader cljexprs-results-filename))]
    (let [eof-sentinel (Object.)]
      (doall (take-while #(not= % eof-sentinel)
                         (repeatedly #(do-read r eof-sentinel)))))))


;; Scale the measurements of very fast benchmarks to more
;; human-readable units.

(defn scale-elapsed-time-units [measurements k]
  (let [max-time-sec (apply max (map #(get % k) measurements))
        [time-unit-name scale-factor]
        (cond (< max-time-sec 1.0e-9) [ "picosec" 1.0e12]
              (< max-time-sec 1.0e-6) [ "nanosec" 1.0e9]
              (< max-time-sec 1.0e-3) ["microsec" 1.0e6]
              (< max-time-sec 1.0e+0) ["millisec" 1.0e3]
              :else                   [     "sec" 1.0e0])]
    [(map #(update-in % [k] (fn [t] (* t scale-factor))) measurements)
     time-unit-name]))


(def prog-name (basename *file*))


;; I'm not using clojure.tools.cli for option parsing due to the extra
;; dependency, but I created this before I knew it would require the
;; extra dependency.
;;(def options-spec
;;  [ ["-t" "--show-table" "Show table of results"]
;;    ["-a" "--show-all-times" "In table, show all run times"]
;;    ["-l" "--show-platform" "In table, show platform"]
;;    ["-p" "--[no]-plots" :default true] ])


(defn show-usage [prog-name options-desc]
  (die "usage: %s [ <options> ] <results.xml> ...
%s
    -t Show a table of all results extracted from the XML files.
       Without this option, no such table is shown.

    -a Only useful if -t is specified.  If both -t and -a are given,
       then in the table of results displayed, there will be a column
       to show not only the fastest elapsed time for each
       benchmark/platform/language combo, but also a list of all elapsed
       times sorted in increasing order.

    -l Like -a, except adds a 'platform' column to the table.

    -p By default, use gnuplot to generate PNG format plots for each
       benchmark.  With this option, skip the generation of plots.

    -h Print HTML with a list of links to images of graphs.  Only
       effective if plots are generated (i.e. -p option is not given).

    -b Print a numbered list of benchmark names as HTML links to the
       PNG graphs.  Only effective if plots are generated (i.e. -p
       option is not given).
" prog-name options-desc))


(defn parse-opts [args]
  (loop [args args
         opts {:show-table false
               :show-all-times false
               :show-platform false
               :print-benchmark-names false
               :print-html false
               :plots true}]
    (if-let [arg (first args)]
      (if-let [opt (case arg
                     "-t" {:show-table true}
                     "-a" {:show-all-times true}
                     "-l" {:show-platform true}
                     "-b" {:print-benchmark-names true}
                     "-h" {:print-html true}
                     "-p" {:plots false}
                     nil)]
        (recur (rest args) (merge opts opt))
        [opts args ""])
      [opts args ""])))


(defn lang-sort-key
  "Take lang-str, a string specifying a language, and convert it into
  a vector of 4 values that can be used to sort the language relative
  to others by using 'compare' on these values.

  Examples:

  (lang-sort-key \"clj-1.5-beta11\")
  ;=> [\"clj\" \"1.5\" \"beta\" 11]

  (lang-sort-key \"clj-1.5-beta2\")
  ;=> [\"clj\" \"1.5\" \"beta\" 2]"
  [lang-str]
  (if-let [matches (re-find #"^(clj)-([^-]+)-(alpha|beta|rc|zfinal)(\d+)?$" lang-str)]
    (let [[_ clj vers alp-bet-rc-final num-str] matches]
      [clj vers alp-bet-rc-final (if num-str (Long/parseLong num-str))])
    [lang-str nil nil nil]))


(defn fixup-title [title-str]
  ;; Several characters in title strings need to be escaped to avoid
  ;; being interpreted specially by gnuplot.  There are probably more,
  ;; but these are all I need for now.
  (str/escape title-str {\_ "\\_",
                         \{ "\\{",
                         \} "\\}"}))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start of 'main' code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(let [[opts filenames options-desc] (parse-opts *command-line-args*)]
  (when (zero? (count filenames))
    (show-usage prog-name options-desc))

  (doseq [fname filenames]
    (when-not (.exists (io/file fname))
      (die "%s: No such file '%s'\n" prog-name fname)))

  ;; TBD: input-type should be either auto-detected, or specified via
  ;; a cmd line arg.
  (let [input-type :cljexprs-results
        data (case input-type
               :xml-results
               (->> filenames
                    (mapcat #(validated-xrel-from-xml-file % prog-name))
                    (map add-keys-to-xml-result-map))
               :cljexprs-results
               (->> filenames
                    (mapcat #(xrel-from-cljexprs-results-file % prog-name))
                    (map replace-keys-of-cljexprs-result-map)))
        ;; Things required of 'data' below: It is a sequence of maps.
        ;; Each map contains the following keys: :benchmark :platform
        ;; :language (all strings) :exit_status (integer, 0 for
        ;; successful run) :elapsed_time_sec (number)

        benchmark-input-order (zipmap (distinct (map :benchmark data))
                                      (iterate inc 1))
        data (->> data
                  ;; If there are multiple measurements for the same
                  ;; benchmark and language/Clojure version, group them
                  ;; together for later processing.
                  (group-by #(select-keys % [:benchmark :platform :language]))
                  
                  ;; Now that they are grouped, remove any in the
                  ;; group that failed (i.e. :exit_status is non-0).
                  ;; Among those that succeeded, if any, keep the one
                  ;; with the smallest elapsed time.
                  ;; fastest-good-run reads keys: :exit_status :elapsed_time_sec
                  ;; Adds these keys to all maps: :num_runs :good_runs
                  ;; Adds these keys to maps if there are good runs: :other_elapsed_time_sec :time_var
                  (map fastest-good-run)

                  ;; Remove any older runs for Clojure versions that
                  ;; are too similar to other versions.
                  (remove (fn [meas]
                            (#{"clj-1.4-alpha5" "clj-1.4-beta3"
                               "clj-1.4-beta5" "clj-1.4-beta7"
                               "clj-1.5-alpha6" "clj-1.5-alpha7"}
                             (:language meas))))
                  
                  ;; For purposes of printing as a table, sort them by
                  ;; benchmark, and within each benchmark by platform, and
                  ;; within that by language.
                  (sort compare-by-benchmark-platform-language-time))]
  
    ;; debug output
    (when (:show-table opts)
      (let [columns (concat [:benchmark]
                            (if (:show-platform opts)
                              [:platform]
                              [])
                            [:language :elapsed_time_sec :time_var :parallelism]
                            (if (:show-all-times opts)
                              [:other_elapsed_time_sec]
                              [])
                            [:good_runs])]
        (p/print-table columns data)))

    ;; Keys used by plots below:
    ;; :benchmark :language :platform :elapsed_time_sec
    (when (:plots opts)
      (doseq [[idx [benchmark benchmark-measurements]]
              (map (fn [i d] [i d])
                   (iterate inc 1)
                   (sort-by #(get benchmark-input-order (key %))
                            (group-by :benchmark data)))]
        
        ;; For each benchmark, create one chart with language/Clojure
        ;; version on the X axis, and run time on the Y axis.  There
        ;; should be a separate "curve" for each platform.
        
        ;; language->idx helps us correctly draw plots in the case
        ;; where some platforms have results for languages where other
        ;; platforms do not.  First create union of all language
        ;; results we have, sort them by name, and assign them a
        ;; numeric index in that order.
        (let [[benchmark-measurements time-unit-name] (scale-elapsed-time-units
                                                       benchmark-measurements
                                                       :elapsed_time_sec)
              language->idx (->> (map :language benchmark-measurements)
                                 set
                                 (sort-by lang-sort-key)
                                 (map-indexed (fn [idx lang] [lang idx]))
                                 (into {}))
              tempfiles
              (for [[plat plat-measurements] (group-by :platform
                                                       benchmark-measurements)]
                (let [graph-one-curve-data
                      (map (fn [meas]
                             [(get language->idx (:language meas))
                              (lang-for-display (:language meas))
                              (:elapsed_time_sec meas)])
                           plat-measurements)
                      graph-one-curve-data (sort graph-one-curve-data)
                      tempfile (temporary-file-name)]
                  (spit tempfile (str/join "\n" (map #(str/join " " %) 
                                                     graph-one-curve-data)))
                  [plat tempfile]))
              
              outfile (io/file "." (str idx ".png"))
              title benchmark
              ylabel time-unit-name
              plot-min 0.0
              ;; It seems that plot-max "" causes gnuplot to
              ;; automatically scale the Y axis for the longest run
              ;; time.
              plot-max ""
              plotrange (str "[][" plot-min ":" plot-max "]")
            
              plotlines
              (for [[platform tempfile] tempfiles]
                (str "\"" tempfile "\""
                     " using 1:3:xtic(2) title '" (fixup-title platform) "'"
                     " with linespoints"))
              
              plotline (str "plot " plotrange (str/join ", " plotlines) "\n")
              command (str
                       "set title '" (fixup-title title) "'\n"
                       "set terminal png size 1200,600\n"
                       "set lmargin 8\n"
                       "set bmargin 7\n"
                       "set key outside\n"
                       "set key center top\n"
                       "set grid\n"
                       "set xtics border in rotate by -90 offset character 0, -0.5, 0\n"
                       "set ylabel \"" ylabel "\"\n"
                       "set output \"" outfile "\"\n"
                       plotline)

              ;; Useful for debugging input to gnuplot
;;              _ (spit (str idx ".gnuplot") command)
              
              notes (sh/sh "gnuplot" :in command)
              err (str/trim-newline (:err notes))]
          
          (when-not (empty? err)
            (iprintf *err* "while generating plot " title "\n" err))
          (when (:print-benchmark-names opts)
            (iprintf "%s %s\n" outfile benchmark))
          
          ;; debug output
;;          (doseq [[plat temp-file-name] tempfiles]
;;            (iprintf "benchmark %s platform %s temp-file-name %s\n"
;;                     benchmark plat temp-file-name))

          ))

      (when (:print-html opts)
        (let [b (map (fn [i d] [i d])
                     (iterate inc 1)
                     (sort-by #(get benchmark-input-order (key %))
                              (group-by :benchmark data)))]
          (iprintf "<ul>\n")
          (doseq [[idx [benchmark benchmark-measurements]] b]
            (iprintf "<li><a href=\"#bench-%d\">%s\n" idx benchmark)
            (iprintf "</a></li>\n"))
          (iprintf "</ul>\n\n")
          (doseq [[idx [benchmark benchmark-measurements]] b]
            (iprintf "<p>\n<a id=\"bench-%d\">\n<img src=\"%s\">\n"
                     idx (str (io/file "." (str idx ".png")))))))
      )))

(shutdown-agents)
(iprintf "Done.\n")
